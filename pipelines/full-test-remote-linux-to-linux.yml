trigger: none
pr: none
schedules:
- cron: 0 16 * * *
  branches:
    include: [ master ]

jobs:
- job: remote_linux2linux
  pool: NNI CI REMOTE CLI
  timeoutInMinutes: 120

  steps:
  - script: |
      echo "##vso[task.setvariable variable=PATH]${PATH}:${HOME}/.local/bin"
      echo "##vso[task.setvariable variable=NNI_RELEASE]999.$(date +%Y%m%d%H%M%S)"
      echo "##vso[task.setvariable variable=endpoint]remote_nni-ci-gpu-03"

  - script: |
      set -e
      echo "PATH: $PATH"
      echo "NNI_RELEASE: $NNI_RELEASE"
      echo $(endpoint)
      python3 -m pip install -U --upgrade pip setuptools
      python3 setup.py build_ts
      python3 setup.py bdist_wheel -p manylinux1_x86_64
      python3 -m pip install dist/nni-$NNI_RELEASE-py3-none-manylinux1_x86_64.whl
    displayName: Install NNI

  - script: |
      set -e
      sudo apt-get install swig -y
      nnictl package install --name=SMAC
      nnictl package install --name=BOHB
    displayName: Install extra tuners

  - script: |
      set -e
      cd examples/tuners/customized_tuner
      python3 setup.py develop --user
      nnictl package install .
    displayName: Install example customized tuner

  - task: CopyFilesOverSSH@0
    inputs:
      sshEndpoint: $(endpoint)
      sourceFolder: dist
      targetFolder: /tmp/nnitest/$(Build.BuildId)/dist
      overwrite: true
    displayName: Copy wheel to remote machine
    timeoutInMinutes: 10

  - task: CopyFilesOverSSH@0
    inputs:
      sshEndpoint: $(endpoint)
      sourceFolder: test
      targetFolder: /tmp/nnitest/$(Build.BuildId)/test
      overwrite: true
    displayName: Copy test scripts to remote machine
    timeoutInMinutes: 10

  - task: SSH@0
    inputs:
      sshEndpoint: $(endpoint)
      runOptions: commands
      commands: |
        python3 /tmp/nnitest/$(Build.BuildId)/test/nni_test/nnitest/remote_docker.py --mode start --name $(Build.BuildId) --image nni/nni
        cp /tmp/nnitest/$(Build.BuildId)/port /tmp/testport-111
        echo "##vso[task.setvariable variable=TEST_SSH]$(cat /tmp/testport-111)"
    displayName: Start docker

  - task: DownloadSecureFile@1
    inputs:
      secureFile: $(remote_private_key)
    displayName: Download secure file

  - script: |
      set -e
      echo "$TEST_SSH"
      echo $(TEST_SSH)
      cp $(Agent.TempDirectory)/$(remote_private_key) test/id_rsa
      chmod 600 test/id_rsa
      scp -P $(remote_port) -i test/id_rsa $(remote_user)@$(remote_host):/tmp/nnitest/$(Build.BuildId)/port test/port
      cat test/port
    displayName: Get docker port

  - script: |
      cd test
      python3 nni_test/nnitest/generate_ts_config.py \
          --ts remote \
          --remote_reuse $(remote_reuse) \
          --remote_user $(docker_user) \
          --remote_host $(remote_host) \
          --remote_port $(cat port) \
          --remote_pwd $(docker_pwd) \
          --nni_manager_ip $(nni_manager_ip)
      cat config/training_service.yml
      python3 nni_test/nnitest/run_tests.py --config config/integration_tests.yml --ts remote
    displayName: Integration test
    continueOnError: true

  - task: SSH@0
    inputs:
      sshEndpoint: $(endpoint)
      runOptions: commands
      commands: python3 /tmp/nnitest/$(Build.BuildId)/test/nni_test/nnitest/remote_docker.py --mode stop --name $(Build.BuildId)
    displayName: Stop docker
